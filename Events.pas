unit Events;interface	uses		QDOffscreen, Globals, Graphics, Menus, Windows;{----------------------------}	procedure HandleEvent (theEvent: EventRecord);{----------------------------}implementation{----------------------------}	procedure HandleEvent (theEvent: EventRecord);		var			theChar: char;			extended: boolean;	begin		case theEvent.what of			mouseDown: 				case FindWindow(theEvent.where, gameGlobals.whichWindow) of					inSysWindow: 						SystemClick(theEvent, gameGlobals.whichWindow);					inMenuBar: 						DoCommand(MenuSelect(theEvent.where));					inDrag: 						DragWindow(gameGlobals.whichWindow, theEvent.where, gameScreen.dragRect);					inContent: 						begin							if gameGlobals.whichWindow <> FrontWindow then								SelectWindow(gameGlobals.whichWindow)							else								begin									GlobalToLocal(theEvent.where);									extended := BitAnd(theEvent.modifiers, shiftKey) <> 0;								end;						end;					otherwise				end;			keyDown, autoKey: 				begin					theChar := chr(BitAnd(theEvent.message, charCodeMask));					if BitAnd(theEvent.modifiers, cmdKey) <> 0 then						DoCommand(MenuKey(theChar))					else						begin						end;				end;			activateEvt: 				begin					if BitAnd(theEvent.modifiers, activeFlag) <> 0 then						begin							DisableItem(gameMenus.menusArray[editM], undoCommand);						end					else						begin							EnableItem(gameMenus.menusArray[editM], undoCommand);						end;				end;			updateEvt: 				begin					BeginUpdate(WindowPtr(theEvent.message));					DrawScreen;					EndUpdate(WindowPtr(theEvent.message));				end;			otherwise		end;	end;{----------------------------}end.