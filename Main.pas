program Main;{I-}							{ disable automatic initialization }	uses		Traps, Globals, Gestalt, Menus, Windows;{----------------------------}begin	InitGraf(@thePort);	InitFonts;	FlushEvents(everyEvent, 0);	InitWindows;	InitMenus;	InitDialogs(nil);	InitCursor;	gHasGestalt := TrapAvailable(_Gestalt);	if gHasGestalt then		begin			myErr := Gestalt(gestaltQuickdrawVersion, gestaltResponse);			if myErr = noErr then				gQuickdrawVersion := gestaltResponse;			gColorQdAvailable := gQuickdrawVersion >= $100;		end;	SetUpMenus;	SetUpScreen;	SetUpWindows;	DrawBackdrop;	doneFlag := false;	repeat		SystemTask;		if GetNextEvent(everyEvent, myEvent) then			case myEvent.what of				mouseDown: 					case FindWindow(myEvent.where, whichWindow) of						inSysWindow: 							SystemClick(myEvent, whichWindow);						inMenuBar: 							DoCommand(MenuSelect(myEvent.where));						inDrag: 							DragWindow(whichWindow, myEvent.where, dragRect);						inContent: 							begin								if whichWindow <> FrontWindow then									SelectWindow(whichWindow)								else									begin										GlobalToLocal(myEvent.where);										extended := BitAnd(myEvent.modifiers, shiftKey) <> 0;									end;							end;						otherwise					end;				keyDown, autoKey: 					begin						theChar := chr(BitAnd(myEvent.message, charCodeMask));						if BitAnd(myEvent.modifiers, cmdKey) <> 0 then							DoCommand(MenuKey(theChar))						else							begin							end;					end;				activateEvt: 					begin						if BitAnd(myEvent.modifiers, activeFlag) <> 0 then							begin								DisableItem(myMenus[editM], undoCommand);							end						else							begin								EnableItem(myMenus[editM], undoCommand);							end;					end;				updateEvt: 					begin						BeginUpdate(WindowPtr(myEvent.message));						DrawBackdrop;						EndUpdate(WindowPtr(myEvent.message));					end;				otherwise			end;	until doneFlag;end.